name: Auto Tag and Release

on:
  push:
    branches:
      - master

jobs:
  tag_and_release:
    runs-on: ubuntu-latest
    steps:
      # 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      # Git 설정
      - name: Setup Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      # 최신 태그 가져오기
      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v1.0.0")
          echo "Latest tag is: $TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV

      # 새 태그 생성
      - name: Create new tag
        id: create_tag
        run: |
          NEW_TAG=$(echo ${{ env.TAG }} | awk -F. '{$NF++; print $0}' OFS=.)
          echo "New tag is: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      # Python을 사용하여 릴리즈 생성
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # requests 패키지 설치
      - name: Install Requests
        run: |
          pip install requests

      # Python을 사용하여 GitHub 릴리즈 생성
      - name: Create Release using Python
        env:
          GITHUB_TOKEN: ${{ secrets.DURI_TOKEN }}
        run: |
          python - <<EOF
          import requests
          import os

          # 환경 변수에서 토큰과 새 태그 가져오기
          ACCESS_TOKEN = os.getenv("GITHUB_TOKEN")
          new_tag = os.getenv("NEW_TAG")
          repo_owner = "durikang"
          repo_name = "Test"

          # 릴리즈 생성 API 호출
          url = f"https://api.github.com/repos/{repo_owner}/{repo_name}/releases"
          headers = {
              "Authorization": f"token {ACCESS_TOKEN}",
              "Accept": "application/vnd.github.v3+json"
          }
          release_data = {
              "tag_name": new_tag,
              "name": f"Release {new_tag}",
              "body": f"This is the release for {new_tag}",
              "draft": False,
              "prerelease": False
          }

          response = requests.post(url, headers=headers, json=release_data)

          # 응답 결과 처리
          if response.status_code == 201:
              print("Release created successfully!")
          else:
              print("Failed to create release")
              print("Status Code:", response.status_code)
              print("Response:", response.text)
          EOF
