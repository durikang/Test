name: Auto Tag, Release, and Upload Built Files

on:
  push:
    branches:
      - master

jobs:
  tag_build_release:
    runs-on: windows-latest
    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Git 설정
      - name: Setup Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      # 3. 최신 태그 가져오기
      - name: Get latest tag
        id: get_tag
        shell: pwsh  # PowerShell 사용
        run: |
          git fetch --tags
          $latestTag = (git describe --tags $(git rev-list --tags --max-count=1)) -replace "\r",""
          if (-not $latestTag) {
            $latestTag = "v1.0.0"
          }
          Write-Output "Latest tag is: $latestTag"
          echo "TAG=$latestTag" >> $env:GITHUB_ENV

      # 4. 새 태그 생성
      - name: Create new tag
        id: create_tag
        shell: pwsh  # PowerShell 사용
        run: |
          $versionParts = $env:TAG -replace "v", "" -split "\."
          $major = $versionParts[0]
          $minor = $versionParts[1]
          $patch = $versionParts[2]
          
          if ($patch -eq 9) {
            $minor = [int]$minor + 1
            $patch = 0
          } else {
            $patch = [int]$patch + 1
          }

          $newTag = "v$major.$minor.$patch"
          Write-Output "New tag is: $newTag"
          echo "NEW_TAG=$newTag" >> $env:GITHUB_ENV
          git tag $newTag
          git push origin $newTag

      # 5. Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # 6. 종속성 설치 (requests 포함)
      - name: Install dependencies
        run: |
          pip install requests pyinstaller

      # 7. 빌드 및 압축 파일 생성 (PyInstaller 사용)
      - name: Build Executable with PyInstaller
        run: |
          # dist 폴더를 ZIP 파일로 압축
          powershell Compress-Archive -Path dist\main -DestinationPath main_update.zip

      # 8. 릴리즈 생성 (파이썬 스크립트 사용) 및 업로드 URL 저장
      - name: Create Release and Update version.json
        id: create_release
        env:
          DURI_TOKEN: ${{ secrets.DURI_TOKEN }}  # GitHub Actions에 저장된 DURI_TOKEN 사용
          NEW_TAG: ${{ env.NEW_TAG }}
        shell: pwsh
        run: |
          # create_release.py 파일에서 requests 모듈 사용을 위해 Python 종속성 설치
          pip install requests
          python config/create_release.py > release_output.txt
          Get-Content release_output.txt | Write-Output
          $uploadUrl = Select-String -Path release_output.txt -Pattern "Upload URL:" | ForEach-Object { $_.Line.Split(' ')[-1] }
          echo "UPLOAD_URL=$uploadUrl" >> $env:GITHUB_ENV

      # 9. 빌드된 파일을 릴리즈에 업로드
      - name: Upload Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DURI_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: main_update.zip  # ZIP 파일의 올바른 경로 설정
          asset_name: "my_app_v${{ env.NEW_TAG }}.zip"  # 파일 이름 지정
          asset_content_type: application/zip
