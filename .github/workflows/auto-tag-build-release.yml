name: Auto Tag, Build, and Release

on:
  push:
    branches:
      - master

jobs:
  tag_build_release:
    runs-on: ubuntu-latest
    steps:
      # 1. 리포지토리 체크아웃
      - name: Checkout repository
        uses: actions/checkout@v2

      # 2. Git 설정
      - name: Setup Git
        run: |
          git config user.name "GitHub Action"
          git config user.email "action@github.com"

      # 3. 최신 태그 가져오기
      - name: Get latest tag
        id: get_tag
        run: |
          git fetch --tags
          TAG=$(git describe --tags `git rev-list --tags --max-count=1` || echo "v1.0.0")
          echo "Latest tag is: $TAG"
          echo "TAG=$TAG" >> $GITHUB_ENV

      # 4. 새 태그 생성
      - name: Create new tag
        id: create_tag
        run: |
          IFS='.' read -ra VERSION_PARTS <<< "${{ env.TAG }}"
          major=${VERSION_PARTS[0]}
          minor=${VERSION_PARTS[1]}
          patch=${VERSION_PARTS[2]}
          
          if [ $patch -eq 9 ]; then
            minor=$((minor + 1))
            patch=0
          else
            patch=$((patch + 1))
          fi

          NEW_TAG="${major}.${minor}.${patch}"
          echo "New tag is: $NEW_TAG"
          echo "NEW_TAG=$NEW_TAG" >> $GITHUB_ENV
          git tag $NEW_TAG
          git push origin $NEW_TAG

      # 5. Python 환경 설정
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: '3.9'

      # 6. 종속성 설치 (requests 포함)
      - name: Install dependencies
        run: |
          pip install requests pyinstaller

      # 7. 빌드 및 압축 파일 생성 (PyInstaller 사용)
      - name: Build Executable with PyInstaller
        run: |
          # PyInstaller를 사용해 실행 파일 및 필요한 파일 생성
          pyinstaller main.py --onedir --add-data="config/version.json:config" --distpath dist
          # 빌드된 실행 파일 이름을 main.exe로 변경 (확장자 명시)
          mv dist/main dist/main.exe
          # dist 폴더를 ZIP 파일로 압축
          cd dist
          zip -r main_update.zip main.exe


      # 8. 릴리즈 생성 (파이썬 스크립트 사용) 및 업로드 URL 저장
      - name: Create Release and Update version.json
        id: create_release
        env:
          DURI_TOKEN: ${{ secrets.DURI_TOKEN }}  # GitHub Actions에 저장된 DURI_TOKEN 사용
          NEW_TAG: ${{ env.NEW_TAG }}
        run: |
          python3 config/create_release.py > release_output.txt
          cat release_output.txt
          # 릴리즈 생성 후 결과를 GitHub Actions에 반영
          upload_url=$(cat release_output.txt | grep "Upload URL:" | awk '{print $3}')
          echo "UPLOAD_URL=$upload_url" >> $GITHUB_ENV

      # 9. 빌드된 파일을 릴리즈에 업로드
      - name: Upload Executable to Release
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.DURI_TOKEN }}
        with:
          upload_url: ${{ env.UPLOAD_URL }}
          asset_path: main_update.zip  # 현재 디렉토리에 생성된 압축 파일 경로
          asset_name: "my_app_v${{ env.NEW_TAG }}.zip"  # 파일 이름 지정
          asset_content_type: application/zip
